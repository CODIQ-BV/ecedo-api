<?php
/**
 * EcedoERPCRMInterfaceApiPassiveFlexSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiPassiveFlexSession Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiPassiveFlexSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.PassiveFlexSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'feed_into_volume' => 'double',
        'take_from_volume' => 'double',
        'measure_unit' => 'string',
        'time_start' => '\DateTime',
        'time_stop' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'feed_into_volume' => 'double',
        'take_from_volume' => 'double',
        'measure_unit' => null,
        'time_start' => 'date',
        'time_stop' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'feed_into_volume' => 'FeedIntoVolume',
        'take_from_volume' => 'TakeFromVolume',
        'measure_unit' => 'MeasureUnit',
        'time_start' => 'TimeStart',
        'time_stop' => 'TimeStop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'feed_into_volume' => 'setFeedIntoVolume',
        'take_from_volume' => 'setTakeFromVolume',
        'measure_unit' => 'setMeasureUnit',
        'time_start' => 'setTimeStart',
        'time_stop' => 'setTimeStop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'feed_into_volume' => 'getFeedIntoVolume',
        'take_from_volume' => 'getTakeFromVolume',
        'measure_unit' => 'getMeasureUnit',
        'time_start' => 'getTimeStart',
        'time_stop' => 'getTimeStop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEASURE_UNIT_KWH = 'KWH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeasureUnitAllowableValues()
    {
        return [
            self::MEASURE_UNIT_KWH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['feed_into_volume'] = isset($data['feed_into_volume']) ? $data['feed_into_volume'] : null;
        $this->container['take_from_volume'] = isset($data['take_from_volume']) ? $data['take_from_volume'] : null;
        $this->container['measure_unit'] = isset($data['measure_unit']) ? $data['measure_unit'] : null;
        $this->container['time_start'] = isset($data['time_start']) ? $data['time_start'] : null;
        $this->container['time_stop'] = isset($data['time_stop']) ? $data['time_stop'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($this->container['measure_unit']) && !in_array($this->container['measure_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'measure_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets feed_into_volume
     *
     * @return double
     */
    public function getFeedIntoVolume()
    {
        return $this->container['feed_into_volume'];
    }

    /**
     * Sets feed_into_volume
     *
     * @param double $feed_into_volume feed_into_volume
     *
     * @return $this
     */
    public function setFeedIntoVolume($feed_into_volume)
    {
        $this->container['feed_into_volume'] = $feed_into_volume;

        return $this;
    }

    /**
     * Gets take_from_volume
     *
     * @return double
     */
    public function getTakeFromVolume()
    {
        return $this->container['take_from_volume'];
    }

    /**
     * Sets take_from_volume
     *
     * @param double $take_from_volume take_from_volume
     *
     * @return $this
     */
    public function setTakeFromVolume($take_from_volume)
    {
        $this->container['take_from_volume'] = $take_from_volume;

        return $this;
    }

    /**
     * Gets measure_unit
     *
     * @return string
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string $measure_unit measure_unit
     *
     * @return $this
     */
    public function setMeasureUnit($measure_unit)
    {
        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($measure_unit) && !in_array($measure_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'measure_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets time_start
     *
     * @return \DateTime
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     *
     * @param \DateTime $time_start time_start
     *
     * @return $this
     */
    public function setTimeStart($time_start)
    {
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets time_stop
     *
     * @return \DateTime
     */
    public function getTimeStop()
    {
        return $this->container['time_stop'];
    }

    /**
     * Sets time_stop
     *
     * @param \DateTime $time_stop time_stop
     *
     * @return $this
     */
    public function setTimeStop($time_stop)
    {
        $this->container['time_stop'] = $time_stop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


