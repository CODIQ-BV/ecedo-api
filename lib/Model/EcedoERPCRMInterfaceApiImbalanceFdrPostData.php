<?php
/**
 * EcedoERPCRMInterfaceApiImbalanceFdrPostData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiImbalanceFdrPostData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiImbalanceFdrPostData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.ImbalanceFdrPostData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'volume' => 'double',
        'total_cost' => 'double',
        'measure_unit' => 'string',
        'smart_device_location_id' => 'string',
        'fdr_id' => 'string',
        'time_start' => '\DateTime',
        'time_stop' => '\DateTime',
        'duration' => 'string',
        'smart_device_reference' => 'string',
        'fp_address' => 'string',
        'fp_zip' => 'string',
        'fp_city' => 'string',
        'fp_country' => 'string',
        'fp_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'volume' => 'double',
        'total_cost' => 'double',
        'measure_unit' => null,
        'smart_device_location_id' => null,
        'fdr_id' => null,
        'time_start' => 'date',
        'time_stop' => 'date',
        'duration' => null,
        'smart_device_reference' => null,
        'fp_address' => null,
        'fp_zip' => null,
        'fp_city' => null,
        'fp_country' => null,
        'fp_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'volume' => 'Volume',
        'total_cost' => 'TotalCost',
        'measure_unit' => 'MeasureUnit',
        'smart_device_location_id' => 'SmartDeviceLocationId',
        'fdr_id' => 'FdrId',
        'time_start' => 'TimeStart',
        'time_stop' => 'TimeStop',
        'duration' => 'Duration',
        'smart_device_reference' => 'SmartDeviceReference',
        'fp_address' => 'FpAddress',
        'fp_zip' => 'FpZip',
        'fp_city' => 'FpCity',
        'fp_country' => 'FpCountry',
        'fp_type' => 'FpType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'volume' => 'setVolume',
        'total_cost' => 'setTotalCost',
        'measure_unit' => 'setMeasureUnit',
        'smart_device_location_id' => 'setSmartDeviceLocationId',
        'fdr_id' => 'setFdrId',
        'time_start' => 'setTimeStart',
        'time_stop' => 'setTimeStop',
        'duration' => 'setDuration',
        'smart_device_reference' => 'setSmartDeviceReference',
        'fp_address' => 'setFpAddress',
        'fp_zip' => 'setFpZip',
        'fp_city' => 'setFpCity',
        'fp_country' => 'setFpCountry',
        'fp_type' => 'setFpType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'volume' => 'getVolume',
        'total_cost' => 'getTotalCost',
        'measure_unit' => 'getMeasureUnit',
        'smart_device_location_id' => 'getSmartDeviceLocationId',
        'fdr_id' => 'getFdrId',
        'time_start' => 'getTimeStart',
        'time_stop' => 'getTimeStop',
        'duration' => 'getDuration',
        'smart_device_reference' => 'getSmartDeviceReference',
        'fp_address' => 'getFpAddress',
        'fp_zip' => 'getFpZip',
        'fp_city' => 'getFpCity',
        'fp_country' => 'getFpCountry',
        'fp_type' => 'getFpType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEASURE_UNIT_KWH = 'KWH';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeasureUnitAllowableValues()
    {
        return [
            self::MEASURE_UNIT_KWH,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['total_cost'] = isset($data['total_cost']) ? $data['total_cost'] : null;
        $this->container['measure_unit'] = isset($data['measure_unit']) ? $data['measure_unit'] : null;
        $this->container['smart_device_location_id'] = isset($data['smart_device_location_id']) ? $data['smart_device_location_id'] : null;
        $this->container['fdr_id'] = isset($data['fdr_id']) ? $data['fdr_id'] : null;
        $this->container['time_start'] = isset($data['time_start']) ? $data['time_start'] : null;
        $this->container['time_stop'] = isset($data['time_stop']) ? $data['time_stop'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['smart_device_reference'] = isset($data['smart_device_reference']) ? $data['smart_device_reference'] : null;
        $this->container['fp_address'] = isset($data['fp_address']) ? $data['fp_address'] : null;
        $this->container['fp_zip'] = isset($data['fp_zip']) ? $data['fp_zip'] : null;
        $this->container['fp_city'] = isset($data['fp_city']) ? $data['fp_city'] : null;
        $this->container['fp_country'] = isset($data['fp_country']) ? $data['fp_country'] : null;
        $this->container['fp_type'] = isset($data['fp_type']) ? $data['fp_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($this->container['measure_unit']) && !in_array($this->container['measure_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'measure_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets volume
     *
     * @return double
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param double $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets total_cost
     *
     * @return double
     */
    public function getTotalCost()
    {
        return $this->container['total_cost'];
    }

    /**
     * Sets total_cost
     *
     * @param double $total_cost total_cost
     *
     * @return $this
     */
    public function setTotalCost($total_cost)
    {
        $this->container['total_cost'] = $total_cost;

        return $this;
    }

    /**
     * Gets measure_unit
     *
     * @return string
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string $measure_unit measure_unit
     *
     * @return $this
     */
    public function setMeasureUnit($measure_unit)
    {
        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($measure_unit) && !in_array($measure_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'measure_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets smart_device_location_id
     *
     * @return string
     */
    public function getSmartDeviceLocationId()
    {
        return $this->container['smart_device_location_id'];
    }

    /**
     * Sets smart_device_location_id
     *
     * @param string $smart_device_location_id smart_device_location_id
     *
     * @return $this
     */
    public function setSmartDeviceLocationId($smart_device_location_id)
    {
        $this->container['smart_device_location_id'] = $smart_device_location_id;

        return $this;
    }

    /**
     * Gets fdr_id
     *
     * @return string
     */
    public function getFdrId()
    {
        return $this->container['fdr_id'];
    }

    /**
     * Sets fdr_id
     *
     * @param string $fdr_id fdr_id
     *
     * @return $this
     */
    public function setFdrId($fdr_id)
    {
        $this->container['fdr_id'] = $fdr_id;

        return $this;
    }

    /**
     * Gets time_start
     *
     * @return \DateTime
     */
    public function getTimeStart()
    {
        return $this->container['time_start'];
    }

    /**
     * Sets time_start
     *
     * @param \DateTime $time_start time_start
     *
     * @return $this
     */
    public function setTimeStart($time_start)
    {
        $this->container['time_start'] = $time_start;

        return $this;
    }

    /**
     * Gets time_stop
     *
     * @return \DateTime
     */
    public function getTimeStop()
    {
        return $this->container['time_stop'];
    }

    /**
     * Sets time_stop
     *
     * @param \DateTime $time_stop time_stop
     *
     * @return $this
     */
    public function setTimeStop($time_stop)
    {
        $this->container['time_stop'] = $time_stop;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets smart_device_reference
     *
     * @return string
     */
    public function getSmartDeviceReference()
    {
        return $this->container['smart_device_reference'];
    }

    /**
     * Sets smart_device_reference
     *
     * @param string $smart_device_reference smart_device_reference
     *
     * @return $this
     */
    public function setSmartDeviceReference($smart_device_reference)
    {
        $this->container['smart_device_reference'] = $smart_device_reference;

        return $this;
    }

    /**
     * Gets fp_address
     *
     * @return string
     */
    public function getFpAddress()
    {
        return $this->container['fp_address'];
    }

    /**
     * Sets fp_address
     *
     * @param string $fp_address fp_address
     *
     * @return $this
     */
    public function setFpAddress($fp_address)
    {
        $this->container['fp_address'] = $fp_address;

        return $this;
    }

    /**
     * Gets fp_zip
     *
     * @return string
     */
    public function getFpZip()
    {
        return $this->container['fp_zip'];
    }

    /**
     * Sets fp_zip
     *
     * @param string $fp_zip fp_zip
     *
     * @return $this
     */
    public function setFpZip($fp_zip)
    {
        $this->container['fp_zip'] = $fp_zip;

        return $this;
    }

    /**
     * Gets fp_city
     *
     * @return string
     */
    public function getFpCity()
    {
        return $this->container['fp_city'];
    }

    /**
     * Sets fp_city
     *
     * @param string $fp_city fp_city
     *
     * @return $this
     */
    public function setFpCity($fp_city)
    {
        $this->container['fp_city'] = $fp_city;

        return $this;
    }

    /**
     * Gets fp_country
     *
     * @return string
     */
    public function getFpCountry()
    {
        return $this->container['fp_country'];
    }

    /**
     * Sets fp_country
     *
     * @param string $fp_country fp_country
     *
     * @return $this
     */
    public function setFpCountry($fp_country)
    {
        $this->container['fp_country'] = $fp_country;

        return $this;
    }

    /**
     * Gets fp_type
     *
     * @return string
     */
    public function getFpType()
    {
        return $this->container['fp_type'];
    }

    /**
     * Sets fp_type
     *
     * @param string $fp_type fp_type
     *
     * @return $this
     */
    public function setFpType($fp_type)
    {
        $this->container['fp_type'] = $fp_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


