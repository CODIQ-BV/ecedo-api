<?php
/**
 * EcedoERPCRMInterfaceApiChargeSessionResultModel
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiChargeSessionResultModel Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiChargeSessionResultModel implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.ChargeSessionResultModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_session_id' => 'string',
        'external_session_id' => 'string',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'duration' => 'int',
        'volume' => 'double',
        'total_price' => 'double',
        'measure_unit' => 'string',
        'usage_type' => 'string',
        'usage_typelocalized' => 'string',
        'cp_address' => 'string',
        'cp_zip' => 'string',
        'cp_city' => 'string',
        'cp_country' => 'string',
        'card_number' => 'string',
        'status' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_session_id' => null,
        'external_session_id' => null,
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'duration' => 'int32',
        'volume' => 'double',
        'total_price' => 'double',
        'measure_unit' => null,
        'usage_type' => null,
        'usage_typelocalized' => null,
        'cp_address' => null,
        'cp_zip' => null,
        'cp_city' => null,
        'cp_country' => null,
        'card_number' => null,
        'status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_session_id' => 'ChargeSessionId',
        'external_session_id' => 'ExternalSessionId',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'duration' => 'Duration',
        'volume' => 'Volume',
        'total_price' => 'TotalPrice',
        'measure_unit' => 'MeasureUnit',
        'usage_type' => 'UsageType',
        'usage_typelocalized' => 'UsageTypelocalized',
        'cp_address' => 'CpAddress',
        'cp_zip' => 'CpZip',
        'cp_city' => 'CpCity',
        'cp_country' => 'CpCountry',
        'card_number' => 'CardNumber',
        'status' => 'Status'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_session_id' => 'setChargeSessionId',
        'external_session_id' => 'setExternalSessionId',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'duration' => 'setDuration',
        'volume' => 'setVolume',
        'total_price' => 'setTotalPrice',
        'measure_unit' => 'setMeasureUnit',
        'usage_type' => 'setUsageType',
        'usage_typelocalized' => 'setUsageTypelocalized',
        'cp_address' => 'setCpAddress',
        'cp_zip' => 'setCpZip',
        'cp_city' => 'setCpCity',
        'cp_country' => 'setCpCountry',
        'card_number' => 'setCardNumber',
        'status' => 'setStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_session_id' => 'getChargeSessionId',
        'external_session_id' => 'getExternalSessionId',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'duration' => 'getDuration',
        'volume' => 'getVolume',
        'total_price' => 'getTotalPrice',
        'measure_unit' => 'getMeasureUnit',
        'usage_type' => 'getUsageType',
        'usage_typelocalized' => 'getUsageTypelocalized',
        'cp_address' => 'getCpAddress',
        'cp_zip' => 'getCpZip',
        'cp_city' => 'getCpCity',
        'cp_country' => 'getCpCountry',
        'card_number' => 'getCardNumber',
        'status' => 'getStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MEASURE_UNIT_KWH = 'KWH';
    const USAGE_TYPE_CPO = 'CPO';
    const USAGE_TYPE_MSP = 'MSP';
    const USAGE_TYPE_SMART_CHARGING_PROVIDER = 'SmartChargingProvider';
    const USAGE_TYPE_REGULATE_IMBALANCE_VIA_SMART_CHARGING_PROVIDER = 'RegulateImbalanceViaSmartChargingProvider';
    const STATUS_RECEIVED = 'Received';
    const STATUS_PROCESSED = 'Processed';
    const STATUS_PROCESS_ERROR = 'ProcessError';
    const STATUS_TO_BE_VALIDATED = 'ToBeValidated';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMeasureUnitAllowableValues()
    {
        return [
            self::MEASURE_UNIT_KWH,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageTypeAllowableValues()
    {
        return [
            self::USAGE_TYPE_CPO,
            self::USAGE_TYPE_MSP,
            self::USAGE_TYPE_SMART_CHARGING_PROVIDER,
            self::USAGE_TYPE_REGULATE_IMBALANCE_VIA_SMART_CHARGING_PROVIDER,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_RECEIVED,
            self::STATUS_PROCESSED,
            self::STATUS_PROCESS_ERROR,
            self::STATUS_TO_BE_VALIDATED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_session_id'] = isset($data['charge_session_id']) ? $data['charge_session_id'] : null;
        $this->container['external_session_id'] = isset($data['external_session_id']) ? $data['external_session_id'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['total_price'] = isset($data['total_price']) ? $data['total_price'] : null;
        $this->container['measure_unit'] = isset($data['measure_unit']) ? $data['measure_unit'] : null;
        $this->container['usage_type'] = isset($data['usage_type']) ? $data['usage_type'] : null;
        $this->container['usage_typelocalized'] = isset($data['usage_typelocalized']) ? $data['usage_typelocalized'] : null;
        $this->container['cp_address'] = isset($data['cp_address']) ? $data['cp_address'] : null;
        $this->container['cp_zip'] = isset($data['cp_zip']) ? $data['cp_zip'] : null;
        $this->container['cp_city'] = isset($data['cp_city']) ? $data['cp_city'] : null;
        $this->container['cp_country'] = isset($data['cp_country']) ? $data['cp_country'] : null;
        $this->container['card_number'] = isset($data['card_number']) ? $data['card_number'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($this->container['measure_unit']) && !in_array($this->container['measure_unit'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'measure_unit', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($this->container['usage_type']) && !in_array($this->container['usage_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_session_id
     *
     * @return string
     */
    public function getChargeSessionId()
    {
        return $this->container['charge_session_id'];
    }

    /**
     * Sets charge_session_id
     *
     * @param string $charge_session_id charge_session_id
     *
     * @return $this
     */
    public function setChargeSessionId($charge_session_id)
    {
        $this->container['charge_session_id'] = $charge_session_id;

        return $this;
    }

    /**
     * Gets external_session_id
     *
     * @return string
     */
    public function getExternalSessionId()
    {
        return $this->container['external_session_id'];
    }

    /**
     * Sets external_session_id
     *
     * @param string $external_session_id external_session_id
     *
     * @return $this
     */
    public function setExternalSessionId($external_session_id)
    {
        $this->container['external_session_id'] = $external_session_id;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date start_date
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date end_date
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return int
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param int $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return double
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param double $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets total_price
     *
     * @return double
     */
    public function getTotalPrice()
    {
        return $this->container['total_price'];
    }

    /**
     * Sets total_price
     *
     * @param double $total_price total_price
     *
     * @return $this
     */
    public function setTotalPrice($total_price)
    {
        $this->container['total_price'] = $total_price;

        return $this;
    }

    /**
     * Gets measure_unit
     *
     * @return string
     */
    public function getMeasureUnit()
    {
        return $this->container['measure_unit'];
    }

    /**
     * Sets measure_unit
     *
     * @param string $measure_unit measure_unit
     *
     * @return $this
     */
    public function setMeasureUnit($measure_unit)
    {
        $allowedValues = $this->getMeasureUnitAllowableValues();
        if (!is_null($measure_unit) && !in_array($measure_unit, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'measure_unit', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['measure_unit'] = $measure_unit;

        return $this;
    }

    /**
     * Gets usage_type
     *
     * @return string
     */
    public function getUsageType()
    {
        return $this->container['usage_type'];
    }

    /**
     * Sets usage_type
     *
     * @param string $usage_type usage_type
     *
     * @return $this
     */
    public function setUsageType($usage_type)
    {
        $allowedValues = $this->getUsageTypeAllowableValues();
        if (!is_null($usage_type) && !in_array($usage_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['usage_type'] = $usage_type;

        return $this;
    }

    /**
     * Gets usage_typelocalized
     *
     * @return string
     */
    public function getUsageTypelocalized()
    {
        return $this->container['usage_typelocalized'];
    }

    /**
     * Sets usage_typelocalized
     *
     * @param string $usage_typelocalized usage_typelocalized
     *
     * @return $this
     */
    public function setUsageTypelocalized($usage_typelocalized)
    {
        $this->container['usage_typelocalized'] = $usage_typelocalized;

        return $this;
    }

    /**
     * Gets cp_address
     *
     * @return string
     */
    public function getCpAddress()
    {
        return $this->container['cp_address'];
    }

    /**
     * Sets cp_address
     *
     * @param string $cp_address cp_address
     *
     * @return $this
     */
    public function setCpAddress($cp_address)
    {
        $this->container['cp_address'] = $cp_address;

        return $this;
    }

    /**
     * Gets cp_zip
     *
     * @return string
     */
    public function getCpZip()
    {
        return $this->container['cp_zip'];
    }

    /**
     * Sets cp_zip
     *
     * @param string $cp_zip cp_zip
     *
     * @return $this
     */
    public function setCpZip($cp_zip)
    {
        $this->container['cp_zip'] = $cp_zip;

        return $this;
    }

    /**
     * Gets cp_city
     *
     * @return string
     */
    public function getCpCity()
    {
        return $this->container['cp_city'];
    }

    /**
     * Sets cp_city
     *
     * @param string $cp_city cp_city
     *
     * @return $this
     */
    public function setCpCity($cp_city)
    {
        $this->container['cp_city'] = $cp_city;

        return $this;
    }

    /**
     * Gets cp_country
     *
     * @return string
     */
    public function getCpCountry()
    {
        return $this->container['cp_country'];
    }

    /**
     * Sets cp_country
     *
     * @param string $cp_country cp_country
     *
     * @return $this
     */
    public function setCpCountry($cp_country)
    {
        $this->container['cp_country'] = $cp_country;

        return $this;
    }

    /**
     * Gets card_number
     *
     * @return string
     */
    public function getCardNumber()
    {
        return $this->container['card_number'];
    }

    /**
     * Sets card_number
     *
     * @param string $card_number card_number
     *
     * @return $this
     */
    public function setCardNumber($card_number)
    {
        $this->container['card_number'] = $card_number;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


