<?php
/**
 * EcedoERPCRMInterfaceApiChargeSession
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo.ERP.UI.Web
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EcedoERPCRMInterfaceApiChargeSession Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EcedoERPCRMInterfaceApiChargeSession implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Ecedo.ERP.CRM.Interface.Api.ChargeSession';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_id' => 'string',
        'start_datetime' => '\DateTime',
        'end_datetime' => '\DateTime',
        'duration' => 'string',
        'volume' => 'string',
        'charge_location_type' => 'string',
        'charge_location_organization_reference' => 'string',
        'charge_location_connection_reference' => 'string',
        'service_provider_organization_reference' => 'string',
        'infra_organization_reference' => 'string',
        'direct_pay_transaction_id' => 'string',
        'payment_type' => 'string',
        'cp_address' => 'string',
        'cp_zip' => 'string',
        'cp_city' => 'string',
        'cp_country' => 'string',
        'cp_id' => 'string',
        'cpo_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_id' => null,
        'start_datetime' => 'date-time',
        'end_datetime' => 'date-time',
        'duration' => null,
        'volume' => null,
        'charge_location_type' => null,
        'charge_location_organization_reference' => null,
        'charge_location_connection_reference' => null,
        'service_provider_organization_reference' => null,
        'infra_organization_reference' => null,
        'direct_pay_transaction_id' => null,
        'payment_type' => null,
        'cp_address' => null,
        'cp_zip' => null,
        'cp_city' => null,
        'cp_country' => null,
        'cp_id' => null,
        'cpo_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_id' => 'ChargeId',
        'start_datetime' => 'Start_datetime',
        'end_datetime' => 'End_datetime',
        'duration' => 'Duration',
        'volume' => 'Volume',
        'charge_location_type' => 'ChargeLocationType',
        'charge_location_organization_reference' => 'ChargeLocationOrganizationReference',
        'charge_location_connection_reference' => 'ChargeLocationConnectionReference',
        'service_provider_organization_reference' => 'ServiceProviderOrganizationReference',
        'infra_organization_reference' => 'InfraOrganizationReference',
        'direct_pay_transaction_id' => 'DirectPayTransactionId',
        'payment_type' => 'PaymentType',
        'cp_address' => 'CpAddress',
        'cp_zip' => 'CpZip',
        'cp_city' => 'CpCity',
        'cp_country' => 'CpCountry',
        'cp_id' => 'CpId',
        'cpo_id' => 'CpoId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_id' => 'setChargeId',
        'start_datetime' => 'setStartDatetime',
        'end_datetime' => 'setEndDatetime',
        'duration' => 'setDuration',
        'volume' => 'setVolume',
        'charge_location_type' => 'setChargeLocationType',
        'charge_location_organization_reference' => 'setChargeLocationOrganizationReference',
        'charge_location_connection_reference' => 'setChargeLocationConnectionReference',
        'service_provider_organization_reference' => 'setServiceProviderOrganizationReference',
        'infra_organization_reference' => 'setInfraOrganizationReference',
        'direct_pay_transaction_id' => 'setDirectPayTransactionId',
        'payment_type' => 'setPaymentType',
        'cp_address' => 'setCpAddress',
        'cp_zip' => 'setCpZip',
        'cp_city' => 'setCpCity',
        'cp_country' => 'setCpCountry',
        'cp_id' => 'setCpId',
        'cpo_id' => 'setCpoId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_id' => 'getChargeId',
        'start_datetime' => 'getStartDatetime',
        'end_datetime' => 'getEndDatetime',
        'duration' => 'getDuration',
        'volume' => 'getVolume',
        'charge_location_type' => 'getChargeLocationType',
        'charge_location_organization_reference' => 'getChargeLocationOrganizationReference',
        'charge_location_connection_reference' => 'getChargeLocationConnectionReference',
        'service_provider_organization_reference' => 'getServiceProviderOrganizationReference',
        'infra_organization_reference' => 'getInfraOrganizationReference',
        'direct_pay_transaction_id' => 'getDirectPayTransactionId',
        'payment_type' => 'getPaymentType',
        'cp_address' => 'getCpAddress',
        'cp_zip' => 'getCpZip',
        'cp_city' => 'getCpCity',
        'cp_country' => 'getCpCountry',
        'cp_id' => 'getCpId',
        'cpo_id' => 'getCpoId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_id'] = isset($data['charge_id']) ? $data['charge_id'] : null;
        $this->container['start_datetime'] = isset($data['start_datetime']) ? $data['start_datetime'] : null;
        $this->container['end_datetime'] = isset($data['end_datetime']) ? $data['end_datetime'] : null;
        $this->container['duration'] = isset($data['duration']) ? $data['duration'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['charge_location_type'] = isset($data['charge_location_type']) ? $data['charge_location_type'] : null;
        $this->container['charge_location_organization_reference'] = isset($data['charge_location_organization_reference']) ? $data['charge_location_organization_reference'] : null;
        $this->container['charge_location_connection_reference'] = isset($data['charge_location_connection_reference']) ? $data['charge_location_connection_reference'] : null;
        $this->container['service_provider_organization_reference'] = isset($data['service_provider_organization_reference']) ? $data['service_provider_organization_reference'] : null;
        $this->container['infra_organization_reference'] = isset($data['infra_organization_reference']) ? $data['infra_organization_reference'] : null;
        $this->container['direct_pay_transaction_id'] = isset($data['direct_pay_transaction_id']) ? $data['direct_pay_transaction_id'] : null;
        $this->container['payment_type'] = isset($data['payment_type']) ? $data['payment_type'] : null;
        $this->container['cp_address'] = isset($data['cp_address']) ? $data['cp_address'] : null;
        $this->container['cp_zip'] = isset($data['cp_zip']) ? $data['cp_zip'] : null;
        $this->container['cp_city'] = isset($data['cp_city']) ? $data['cp_city'] : null;
        $this->container['cp_country'] = isset($data['cp_country']) ? $data['cp_country'] : null;
        $this->container['cp_id'] = isset($data['cp_id']) ? $data['cp_id'] : null;
        $this->container['cpo_id'] = isset($data['cpo_id']) ? $data['cpo_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets charge_id
     *
     * @return string
     */
    public function getChargeId()
    {
        return $this->container['charge_id'];
    }

    /**
     * Sets charge_id
     *
     * @param string $charge_id charge_id
     *
     * @return $this
     */
    public function setChargeId($charge_id)
    {
        $this->container['charge_id'] = $charge_id;

        return $this;
    }

    /**
     * Gets start_datetime
     *
     * @return \DateTime
     */
    public function getStartDatetime()
    {
        return $this->container['start_datetime'];
    }

    /**
     * Sets start_datetime
     *
     * @param \DateTime $start_datetime start_datetime
     *
     * @return $this
     */
    public function setStartDatetime($start_datetime)
    {
        $this->container['start_datetime'] = $start_datetime;

        return $this;
    }

    /**
     * Gets end_datetime
     *
     * @return \DateTime
     */
    public function getEndDatetime()
    {
        return $this->container['end_datetime'];
    }

    /**
     * Sets end_datetime
     *
     * @param \DateTime $end_datetime end_datetime
     *
     * @return $this
     */
    public function setEndDatetime($end_datetime)
    {
        $this->container['end_datetime'] = $end_datetime;

        return $this;
    }

    /**
     * Gets duration
     *
     * @return string
     */
    public function getDuration()
    {
        return $this->container['duration'];
    }

    /**
     * Sets duration
     *
     * @param string $duration duration
     *
     * @return $this
     */
    public function setDuration($duration)
    {
        $this->container['duration'] = $duration;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return string
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param string $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets charge_location_type
     *
     * @return string
     */
    public function getChargeLocationType()
    {
        return $this->container['charge_location_type'];
    }

    /**
     * Sets charge_location_type
     *
     * @param string $charge_location_type charge_location_type
     *
     * @return $this
     */
    public function setChargeLocationType($charge_location_type)
    {
        $this->container['charge_location_type'] = $charge_location_type;

        return $this;
    }

    /**
     * Gets charge_location_organization_reference
     *
     * @return string
     */
    public function getChargeLocationOrganizationReference()
    {
        return $this->container['charge_location_organization_reference'];
    }

    /**
     * Sets charge_location_organization_reference
     *
     * @param string $charge_location_organization_reference charge_location_organization_reference
     *
     * @return $this
     */
    public function setChargeLocationOrganizationReference($charge_location_organization_reference)
    {
        $this->container['charge_location_organization_reference'] = $charge_location_organization_reference;

        return $this;
    }

    /**
     * Gets charge_location_connection_reference
     *
     * @return string
     */
    public function getChargeLocationConnectionReference()
    {
        return $this->container['charge_location_connection_reference'];
    }

    /**
     * Sets charge_location_connection_reference
     *
     * @param string $charge_location_connection_reference charge_location_connection_reference
     *
     * @return $this
     */
    public function setChargeLocationConnectionReference($charge_location_connection_reference)
    {
        $this->container['charge_location_connection_reference'] = $charge_location_connection_reference;

        return $this;
    }

    /**
     * Gets service_provider_organization_reference
     *
     * @return string
     */
    public function getServiceProviderOrganizationReference()
    {
        return $this->container['service_provider_organization_reference'];
    }

    /**
     * Sets service_provider_organization_reference
     *
     * @param string $service_provider_organization_reference service_provider_organization_reference
     *
     * @return $this
     */
    public function setServiceProviderOrganizationReference($service_provider_organization_reference)
    {
        $this->container['service_provider_organization_reference'] = $service_provider_organization_reference;

        return $this;
    }

    /**
     * Gets infra_organization_reference
     *
     * @return string
     */
    public function getInfraOrganizationReference()
    {
        return $this->container['infra_organization_reference'];
    }

    /**
     * Sets infra_organization_reference
     *
     * @param string $infra_organization_reference infra_organization_reference
     *
     * @return $this
     */
    public function setInfraOrganizationReference($infra_organization_reference)
    {
        $this->container['infra_organization_reference'] = $infra_organization_reference;

        return $this;
    }

    /**
     * Gets direct_pay_transaction_id
     *
     * @return string
     */
    public function getDirectPayTransactionId()
    {
        return $this->container['direct_pay_transaction_id'];
    }

    /**
     * Sets direct_pay_transaction_id
     *
     * @param string $direct_pay_transaction_id direct_pay_transaction_id
     *
     * @return $this
     */
    public function setDirectPayTransactionId($direct_pay_transaction_id)
    {
        $this->container['direct_pay_transaction_id'] = $direct_pay_transaction_id;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string $payment_type payment_type
     *
     * @return $this
     */
    public function setPaymentType($payment_type)
    {
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets cp_address
     *
     * @return string
     */
    public function getCpAddress()
    {
        return $this->container['cp_address'];
    }

    /**
     * Sets cp_address
     *
     * @param string $cp_address cp_address
     *
     * @return $this
     */
    public function setCpAddress($cp_address)
    {
        $this->container['cp_address'] = $cp_address;

        return $this;
    }

    /**
     * Gets cp_zip
     *
     * @return string
     */
    public function getCpZip()
    {
        return $this->container['cp_zip'];
    }

    /**
     * Sets cp_zip
     *
     * @param string $cp_zip cp_zip
     *
     * @return $this
     */
    public function setCpZip($cp_zip)
    {
        $this->container['cp_zip'] = $cp_zip;

        return $this;
    }

    /**
     * Gets cp_city
     *
     * @return string
     */
    public function getCpCity()
    {
        return $this->container['cp_city'];
    }

    /**
     * Sets cp_city
     *
     * @param string $cp_city cp_city
     *
     * @return $this
     */
    public function setCpCity($cp_city)
    {
        $this->container['cp_city'] = $cp_city;

        return $this;
    }

    /**
     * Gets cp_country
     *
     * @return string
     */
    public function getCpCountry()
    {
        return $this->container['cp_country'];
    }

    /**
     * Sets cp_country
     *
     * @param string $cp_country cp_country
     *
     * @return $this
     */
    public function setCpCountry($cp_country)
    {
        $this->container['cp_country'] = $cp_country;

        return $this;
    }

    /**
     * Gets cp_id
     *
     * @return string
     */
    public function getCpId()
    {
        return $this->container['cp_id'];
    }

    /**
     * Sets cp_id
     *
     * @param string $cp_id cp_id
     *
     * @return $this
     */
    public function setCpId($cp_id)
    {
        $this->container['cp_id'] = $cp_id;

        return $this;
    }

    /**
     * Gets cpo_id
     *
     * @return string
     */
    public function getCpoId()
    {
        return $this->container['cpo_id'];
    }

    /**
     * Sets cpo_id
     *
     * @param string $cpo_id cpo_id
     *
     * @return $this
     */
    public function setCpoId($cpo_id)
    {
        $this->container['cpo_id'] = $cpo_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


