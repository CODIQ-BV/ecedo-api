<?php
/**
 * SysEvChargerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Ecedo API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.22
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SysEvChargerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SysEvChargerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation sysEvChargerAddChargeCards
     *
     * Toevoegen passen aan bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargeCardsPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function sysEvChargerAddChargeCards($organization_id, $ev_charger_id, $post_data)
    {
        list($response) = $this->sysEvChargerAddChargeCardsWithHttpInfo($organization_id, $ev_charger_id, $post_data);
        return $response;
    }

    /**
     * Operation sysEvChargerAddChargeCardsWithHttpInfo
     *
     * Toevoegen passen aan bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargeCardsPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerAddChargeCardsWithHttpInfo($organization_id, $ev_charger_id, $post_data)
    {
        $returnType = 'string[]';
        $request = $this->sysEvChargerAddChargeCardsRequest($organization_id, $ev_charger_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerAddChargeCardsAsync
     *
     * Toevoegen passen aan bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargeCardsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddChargeCardsAsync($organization_id, $ev_charger_id, $post_data)
    {
        return $this->sysEvChargerAddChargeCardsAsyncWithHttpInfo($organization_id, $ev_charger_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerAddChargeCardsAsyncWithHttpInfo
     *
     * Toevoegen passen aan bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargeCardsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddChargeCardsAsyncWithHttpInfo($organization_id, $ev_charger_id, $post_data)
    {
        $returnType = 'string[]';
        $request = $this->sysEvChargerAddChargeCardsRequest($organization_id, $ev_charger_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerAddChargeCards'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargeCardsPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerAddChargeCardsRequest($organization_id, $ev_charger_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerAddChargeCards'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerAddChargeCards'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysEvChargerAddChargeCards'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evchargecards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerAddConnector
     *
     * Toevoegen connector aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectorPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function sysEvChargerAddConnector($organization_id, $ev_charger_id, $ocpi_id, $post_data)
    {
        list($response) = $this->sysEvChargerAddConnectorWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $post_data);
        return $response;
    }

    /**
     * Operation sysEvChargerAddConnectorWithHttpInfo
     *
     * Toevoegen connector aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectorPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerAddConnectorWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddConnectorRequest($organization_id, $ev_charger_id, $ocpi_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerAddConnectorAsync
     *
     * Toevoegen connector aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectorPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddConnectorAsync($organization_id, $ev_charger_id, $ocpi_id, $post_data)
    {
        return $this->sysEvChargerAddConnectorAsyncWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerAddConnectorAsyncWithHttpInfo
     *
     * Toevoegen connector aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectorPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddConnectorAsyncWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddConnectorRequest($organization_id, $ev_charger_id, $ocpi_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerAddConnector'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiConnectorPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerAddConnectorRequest($organization_id, $ev_charger_id, $ocpi_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerAddConnector'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerAddConnector'
            );
        }
        // verify the required parameter 'ocpi_id' is set
        if ($ocpi_id === null || (is_array($ocpi_id) && count($ocpi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ocpi_id when calling sysEvChargerAddConnector'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysEvChargerAddConnector'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evses/{ocpiId}/connector';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }
        // path params
        if ($ocpi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ocpiId' . '}',
                ObjectSerializer::toPathValue($ocpi_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerAddContract
     *
     * Toevoegen laadpaalcontract aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function sysEvChargerAddContract($organization_id, $evse_id, $post_data)
    {
        list($response) = $this->sysEvChargerAddContractWithHttpInfo($organization_id, $evse_id, $post_data);
        return $response;
    }

    /**
     * Operation sysEvChargerAddContractWithHttpInfo
     *
     * Toevoegen laadpaalcontract aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerAddContractWithHttpInfo($organization_id, $evse_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddContractRequest($organization_id, $evse_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerAddContractAsync
     *
     * Toevoegen laadpaalcontract aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddContractAsync($organization_id, $evse_id, $post_data)
    {
        return $this->sysEvChargerAddContractAsyncWithHttpInfo($organization_id, $evse_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerAddContractAsyncWithHttpInfo
     *
     * Toevoegen laadpaalcontract aan Evse
     *
     * @param  string $organization_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddContractAsyncWithHttpInfo($organization_id, $evse_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddContractRequest($organization_id, $evse_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerAddContract'
     *
     * @param  string $organization_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerAddContractRequest($organization_id, $evse_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerAddContract'
            );
        }
        // verify the required parameter 'evse_id' is set
        if ($evse_id === null || (is_array($evse_id) && count($evse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evse_id when calling sysEvChargerAddContract'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysEvChargerAddContract'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evses/{evseId}/laadpaalcontract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($evse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evseId' . '}',
                ObjectSerializer::toPathValue($evse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerAddServiceContract
     *
     * Toevoegen van een servicecontract aan een laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function sysEvChargerAddServiceContract($organization_id, $ev_charger_id, $post_data)
    {
        list($response) = $this->sysEvChargerAddServiceContractWithHttpInfo($organization_id, $ev_charger_id, $post_data);
        return $response;
    }

    /**
     * Operation sysEvChargerAddServiceContractWithHttpInfo
     *
     * Toevoegen van een servicecontract aan een laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerAddServiceContractWithHttpInfo($organization_id, $ev_charger_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddServiceContractRequest($organization_id, $ev_charger_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerAddServiceContractAsync
     *
     * Toevoegen van een servicecontract aan een laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddServiceContractAsync($organization_id, $ev_charger_id, $post_data)
    {
        return $this->sysEvChargerAddServiceContractAsyncWithHttpInfo($organization_id, $ev_charger_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerAddServiceContractAsyncWithHttpInfo
     *
     * Toevoegen van een servicecontract aan een laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerAddServiceContractAsyncWithHttpInfo($organization_id, $ev_charger_id, $post_data)
    {
        $returnType = 'string';
        $request = $this->sysEvChargerAddServiceContractRequest($organization_id, $ev_charger_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerAddServiceContract'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerAddServiceContractRequest($organization_id, $ev_charger_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerAddServiceContract'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerAddServiceContract'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysEvChargerAddServiceContract'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/servicecontracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerDeleteChargeCards
     *
     * Verwijderen passen van bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $card_number  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysEvChargerDeleteChargeCards($organization_id, $ev_charger_id, $card_number)
    {
        list($response) = $this->sysEvChargerDeleteChargeCardsWithHttpInfo($organization_id, $ev_charger_id, $card_number);
        return $response;
    }

    /**
     * Operation sysEvChargerDeleteChargeCardsWithHttpInfo
     *
     * Verwijderen passen van bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $card_number  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerDeleteChargeCardsWithHttpInfo($organization_id, $ev_charger_id, $card_number)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerDeleteChargeCardsRequest($organization_id, $ev_charger_id, $card_number);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerDeleteChargeCardsAsync
     *
     * Verwijderen passen van bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $card_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerDeleteChargeCardsAsync($organization_id, $ev_charger_id, $card_number)
    {
        return $this->sysEvChargerDeleteChargeCardsAsyncWithHttpInfo($organization_id, $ev_charger_id, $card_number)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerDeleteChargeCardsAsyncWithHttpInfo
     *
     * Verwijderen passen van bestaande laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $card_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerDeleteChargeCardsAsyncWithHttpInfo($organization_id, $ev_charger_id, $card_number)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerDeleteChargeCardsRequest($organization_id, $ev_charger_id, $card_number);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerDeleteChargeCards'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $card_number  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerDeleteChargeCardsRequest($organization_id, $ev_charger_id, $card_number)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerDeleteChargeCards'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerDeleteChargeCards'
            );
        }
        // verify the required parameter 'card_number' is set
        if ($card_number === null || (is_array($card_number) && count($card_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $card_number when calling sysEvChargerDeleteChargeCards'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evchargecards/{cardNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }
        // path params
        if ($card_number !== null) {
            $resourcePath = str_replace(
                '{' . 'cardNumber' . '}',
                ObjectSerializer::toPathValue($card_number),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerEvChargerProperties
     *
     * Wijzigen laadpaal property
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPropertyPostData $ev_charger_property  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysEvChargerEvChargerProperties($organization_id, $ev_charger_id, $ev_charger_property)
    {
        list($response) = $this->sysEvChargerEvChargerPropertiesWithHttpInfo($organization_id, $ev_charger_id, $ev_charger_property);
        return $response;
    }

    /**
     * Operation sysEvChargerEvChargerPropertiesWithHttpInfo
     *
     * Wijzigen laadpaal property
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPropertyPostData $ev_charger_property  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerEvChargerPropertiesWithHttpInfo($organization_id, $ev_charger_id, $ev_charger_property)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerEvChargerPropertiesRequest($organization_id, $ev_charger_id, $ev_charger_property);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerEvChargerPropertiesAsync
     *
     * Wijzigen laadpaal property
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPropertyPostData $ev_charger_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerEvChargerPropertiesAsync($organization_id, $ev_charger_id, $ev_charger_property)
    {
        return $this->sysEvChargerEvChargerPropertiesAsyncWithHttpInfo($organization_id, $ev_charger_id, $ev_charger_property)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerEvChargerPropertiesAsyncWithHttpInfo
     *
     * Wijzigen laadpaal property
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPropertyPostData $ev_charger_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerEvChargerPropertiesAsyncWithHttpInfo($organization_id, $ev_charger_id, $ev_charger_property)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerEvChargerPropertiesRequest($organization_id, $ev_charger_id, $ev_charger_property);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerEvChargerProperties'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPropertyPostData $ev_charger_property  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerEvChargerPropertiesRequest($organization_id, $ev_charger_id, $ev_charger_property)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerEvChargerProperties'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerEvChargerProperties'
            );
        }
        // verify the required parameter 'ev_charger_property' is set
        if ($ev_charger_property === null || (is_array($ev_charger_property) && count($ev_charger_property) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_property when calling sysEvChargerEvChargerProperties'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evcharger/{evChargerId}/evchargerproperties';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($ev_charger_property)) {
            $_tempBody = $ev_charger_property;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetByOrganization
     *
     * Laadpalen per organisatie
     *
     * @param  string $organization_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult[]
     */
    public function sysEvChargerGetByOrganization($organization_id)
    {
        list($response) = $this->sysEvChargerGetByOrganizationWithHttpInfo($organization_id);
        return $response;
    }

    /**
     * Operation sysEvChargerGetByOrganizationWithHttpInfo
     *
     * Laadpalen per organisatie
     *
     * @param  string $organization_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetByOrganizationWithHttpInfo($organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult[]';
        $request = $this->sysEvChargerGetByOrganizationRequest($organization_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetByOrganizationAsync
     *
     * Laadpalen per organisatie
     *
     * @param  string $organization_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetByOrganizationAsync($organization_id)
    {
        return $this->sysEvChargerGetByOrganizationAsyncWithHttpInfo($organization_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetByOrganizationAsyncWithHttpInfo
     *
     * Laadpalen per organisatie
     *
     * @param  string $organization_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetByOrganizationAsyncWithHttpInfo($organization_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult[]';
        $request = $this->sysEvChargerGetByOrganizationRequest($organization_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetByOrganization'
     *
     * @param  string $organization_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetByOrganizationRequest($organization_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetByOrganization'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetChargeSessions
     *
     * Get charge sessions for a given EVSE in a given period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \DateTime $start_date  (required)
     * @param  \DateTime $end_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]
     */
    public function sysEvChargerGetChargeSessions($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
    {
        list($response) = $this->sysEvChargerGetChargeSessionsWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation sysEvChargerGetChargeSessionsWithHttpInfo
     *
     * Get charge sessions for a given EVSE in a given period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \DateTime $start_date  (required)
     * @param  \DateTime $end_date  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetChargeSessionsWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]';
        $request = $this->sysEvChargerGetChargeSessionsRequest($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetChargeSessionsAsync
     *
     * Get charge sessions for a given EVSE in a given period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \DateTime $start_date  (required)
     * @param  \DateTime $end_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetChargeSessionsAsync($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
    {
        return $this->sysEvChargerGetChargeSessionsAsyncWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetChargeSessionsAsyncWithHttpInfo
     *
     * Get charge sessions for a given EVSE in a given period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \DateTime $start_date  (required)
     * @param  \DateTime $end_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetChargeSessionsAsyncWithHttpInfo($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]';
        $request = $this->sysEvChargerGetChargeSessionsRequest($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetChargeSessions'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $ocpi_id  (required)
     * @param  \DateTime $start_date  (required)
     * @param  \DateTime $end_date  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetChargeSessionsRequest($organization_id, $ev_charger_id, $ocpi_id, $start_date, $end_date)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetChargeSessions'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerGetChargeSessions'
            );
        }
        // verify the required parameter 'ocpi_id' is set
        if ($ocpi_id === null || (is_array($ocpi_id) && count($ocpi_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ocpi_id when calling sysEvChargerGetChargeSessions'
            );
        }
        // verify the required parameter 'start_date' is set
        if ($start_date === null || (is_array($start_date) && count($start_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $start_date when calling sysEvChargerGetChargeSessions'
            );
        }
        // verify the required parameter 'end_date' is set
        if ($end_date === null || (is_array($end_date) && count($end_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $end_date when calling sysEvChargerGetChargeSessions'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evses/{ocpiId}/chargesessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }
        // path params
        if ($ocpi_id !== null) {
            $resourcePath = str_replace(
                '{' . 'ocpiId' . '}',
                ObjectSerializer::toPathValue($ocpi_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetChargeSessionsForEvCharger
     *
     * Get chargesessions for a given EvCharger in a period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \DateTime $start_date  (optional)
     * @param  \DateTime $end_date  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]
     */
    public function sysEvChargerGetChargeSessionsForEvCharger($organization_id, $ev_charger_id, $start_date = null, $end_date = null)
    {
        list($response) = $this->sysEvChargerGetChargeSessionsForEvChargerWithHttpInfo($organization_id, $ev_charger_id, $start_date, $end_date);
        return $response;
    }

    /**
     * Operation sysEvChargerGetChargeSessionsForEvChargerWithHttpInfo
     *
     * Get chargesessions for a given EvCharger in a period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \DateTime $start_date  (optional)
     * @param  \DateTime $end_date  (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetChargeSessionsForEvChargerWithHttpInfo($organization_id, $ev_charger_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]';
        $request = $this->sysEvChargerGetChargeSessionsForEvChargerRequest($organization_id, $ev_charger_id, $start_date, $end_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetChargeSessionsForEvChargerAsync
     *
     * Get chargesessions for a given EvCharger in a period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \DateTime $start_date  (optional)
     * @param  \DateTime $end_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetChargeSessionsForEvChargerAsync($organization_id, $ev_charger_id, $start_date = null, $end_date = null)
    {
        return $this->sysEvChargerGetChargeSessionsForEvChargerAsyncWithHttpInfo($organization_id, $ev_charger_id, $start_date, $end_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetChargeSessionsForEvChargerAsyncWithHttpInfo
     *
     * Get chargesessions for a given EvCharger in a period
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \DateTime $start_date  (optional)
     * @param  \DateTime $end_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetChargeSessionsForEvChargerAsyncWithHttpInfo($organization_id, $ev_charger_id, $start_date = null, $end_date = null)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiChargeSessionResult[]';
        $request = $this->sysEvChargerGetChargeSessionsForEvChargerRequest($organization_id, $ev_charger_id, $start_date, $end_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetChargeSessionsForEvCharger'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \DateTime $start_date  (optional)
     * @param  \DateTime $end_date  (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetChargeSessionsForEvChargerRequest($organization_id, $ev_charger_id, $start_date = null, $end_date = null)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetChargeSessionsForEvCharger'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerGetChargeSessionsForEvCharger'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/chargesessions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($start_date !== null) {
            $queryParams['startDate'] = ObjectSerializer::toQueryValue($start_date);
        }
        // query params
        if ($end_date !== null) {
            $queryParams['endDate'] = ObjectSerializer::toQueryValue($end_date);
        }

        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetEvChargerContracts
     *
     * Verkrijgen van alle contracten behorend bij een laadpaal
     *
     * @param  string $organization_id Unieke Guid van organisatie (required)
     * @param  string $ev_charger_id Unieke Guid van de laadpaal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function sysEvChargerGetEvChargerContracts($organization_id, $ev_charger_id)
    {
        $this->sysEvChargerGetEvChargerContractsWithHttpInfo($organization_id, $ev_charger_id);
    }

    /**
     * Operation sysEvChargerGetEvChargerContractsWithHttpInfo
     *
     * Verkrijgen van alle contracten behorend bij een laadpaal
     *
     * @param  string $organization_id Unieke Guid van organisatie (required)
     * @param  string $ev_charger_id Unieke Guid van de laadpaal (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetEvChargerContractsWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '';
        $request = $this->sysEvChargerGetEvChargerContractsRequest($organization_id, $ev_charger_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetEvChargerContractsAsync
     *
     * Verkrijgen van alle contracten behorend bij een laadpaal
     *
     * @param  string $organization_id Unieke Guid van organisatie (required)
     * @param  string $ev_charger_id Unieke Guid van de laadpaal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetEvChargerContractsAsync($organization_id, $ev_charger_id)
    {
        return $this->sysEvChargerGetEvChargerContractsAsyncWithHttpInfo($organization_id, $ev_charger_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetEvChargerContractsAsyncWithHttpInfo
     *
     * Verkrijgen van alle contracten behorend bij een laadpaal
     *
     * @param  string $organization_id Unieke Guid van organisatie (required)
     * @param  string $ev_charger_id Unieke Guid van de laadpaal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetEvChargerContractsAsyncWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '';
        $request = $this->sysEvChargerGetEvChargerContractsRequest($organization_id, $ev_charger_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetEvChargerContracts'
     *
     * @param  string $organization_id Unieke Guid van organisatie (required)
     * @param  string $ev_charger_id Unieke Guid van de laadpaal (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetEvChargerContractsRequest($organization_id, $ev_charger_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetEvChargerContracts'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerGetEvChargerContracts'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evchargercontracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetEvChargerServiceContracts
     *
     * @param  string $organization_id organization_id (required)
     * @param  string $ev_charger_id ev_charger_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractData[]
     */
    public function sysEvChargerGetEvChargerServiceContracts($organization_id, $ev_charger_id)
    {
        list($response) = $this->sysEvChargerGetEvChargerServiceContractsWithHttpInfo($organization_id, $ev_charger_id);
        return $response;
    }

    /**
     * Operation sysEvChargerGetEvChargerServiceContractsWithHttpInfo
     *
     * @param  string $organization_id (required)
     * @param  string $ev_charger_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractData[], HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetEvChargerServiceContractsWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractData[]';
        $request = $this->sysEvChargerGetEvChargerServiceContractsRequest($organization_id, $ev_charger_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractData[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetEvChargerServiceContractsAsync
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $ev_charger_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetEvChargerServiceContractsAsync($organization_id, $ev_charger_id)
    {
        return $this->sysEvChargerGetEvChargerServiceContractsAsyncWithHttpInfo($organization_id, $ev_charger_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetEvChargerServiceContractsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $organization_id (required)
     * @param  string $ev_charger_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetEvChargerServiceContractsAsyncWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerServiceContractData[]';
        $request = $this->sysEvChargerGetEvChargerServiceContractsRequest($organization_id, $ev_charger_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetEvChargerServiceContracts'
     *
     * @param  string $organization_id (required)
     * @param  string $ev_charger_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetEvChargerServiceContractsRequest($organization_id, $ev_charger_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetEvChargerServiceContracts'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerGetEvChargerServiceContracts'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/servicecontracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerGetSpecific
     *
     * Eén specifieke laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult
     */
    public function sysEvChargerGetSpecific($organization_id, $ev_charger_id)
    {
        list($response) = $this->sysEvChargerGetSpecificWithHttpInfo($organization_id, $ev_charger_id);
        return $response;
    }

    /**
     * Operation sysEvChargerGetSpecificWithHttpInfo
     *
     * Eén specifieke laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerGetSpecificWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult';
        $request = $this->sysEvChargerGetSpecificRequest($organization_id, $ev_charger_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage400',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerGetSpecificAsync
     *
     * Eén specifieke laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetSpecificAsync($organization_id, $ev_charger_id)
    {
        return $this->sysEvChargerGetSpecificAsyncWithHttpInfo($organization_id, $ev_charger_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerGetSpecificAsyncWithHttpInfo
     *
     * Eén specifieke laadpaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerGetSpecificAsyncWithHttpInfo($organization_id, $ev_charger_id)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiFullEvChargerResult';
        $request = $this->sysEvChargerGetSpecificRequest($organization_id, $ev_charger_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerGetSpecific'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerGetSpecificRequest($organization_id, $ev_charger_id)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerGetSpecific'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerGetSpecific'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerPost
     *
     * Toevoegen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerResult
     */
    public function sysEvChargerPost($organization_id, $post_data)
    {
        list($response) = $this->sysEvChargerPostWithHttpInfo($organization_id, $post_data);
        return $response;
    }

    /**
     * Operation sysEvChargerPostWithHttpInfo
     *
     * Toevoegen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPostData $post_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerPostWithHttpInfo($organization_id, $post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerResult';
        $request = $this->sysEvChargerPostRequest($organization_id, $post_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerPostAsync
     *
     * Toevoegen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerPostAsync($organization_id, $post_data)
    {
        return $this->sysEvChargerPostAsyncWithHttpInfo($organization_id, $post_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerPostAsyncWithHttpInfo
     *
     * Toevoegen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerPostAsyncWithHttpInfo($organization_id, $post_data)
    {
        $returnType = '\Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerResult';
        $request = $this->sysEvChargerPostRequest($organization_id, $post_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerPost'
     *
     * @param  string $organization_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPostData $post_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerPostRequest($organization_id, $post_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerPost'
            );
        }
        // verify the required parameter 'post_data' is set
        if ($post_data === null || (is_array($post_data) && count($post_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $post_data when calling sysEvChargerPost'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evcharger';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($post_data)) {
            $_tempBody = $post_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerPut
     *
     * Wijzigen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysEvChargerPut($organization_id, $ev_charger_id, $put_data)
    {
        list($response) = $this->sysEvChargerPutWithHttpInfo($organization_id, $ev_charger_id, $put_data);
        return $response;
    }

    /**
     * Operation sysEvChargerPutWithHttpInfo
     *
     * Wijzigen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerPutWithHttpInfo($organization_id, $ev_charger_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerPutRequest($organization_id, $ev_charger_id, $put_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerPutAsync
     *
     * Wijzigen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerPutAsync($organization_id, $ev_charger_id, $put_data)
    {
        return $this->sysEvChargerPutAsyncWithHttpInfo($organization_id, $ev_charger_id, $put_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerPutAsyncWithHttpInfo
     *
     * Wijzigen laapaal
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerPutAsyncWithHttpInfo($organization_id, $ev_charger_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerPutRequest($organization_id, $ev_charger_id, $put_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerPut'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvChargerPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerPutRequest($organization_id, $ev_charger_id, $put_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerPut'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerPut'
            );
        }
        // verify the required parameter 'put_data' is set
        if ($put_data === null || (is_array($put_data) && count($put_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_data when calling sysEvChargerPut'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($put_data)) {
            $_tempBody = $put_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sysEvChargerUpdateEvseProperty
     *
     * Update EVSE property GuestUsageAllowed
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvsePropertyPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function sysEvChargerUpdateEvseProperty($organization_id, $ev_charger_id, $evse_id, $put_data)
    {
        list($response) = $this->sysEvChargerUpdateEvsePropertyWithHttpInfo($organization_id, $ev_charger_id, $evse_id, $put_data);
        return $response;
    }

    /**
     * Operation sysEvChargerUpdateEvsePropertyWithHttpInfo
     *
     * Update EVSE property GuestUsageAllowed
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvsePropertyPutData $put_data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function sysEvChargerUpdateEvsePropertyWithHttpInfo($organization_id, $ev_charger_id, $evse_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerUpdateEvsePropertyRequest($organization_id, $ev_charger_id, $evse_id, $put_data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EcedoERPCRMInterfaceApiErrorMessage401',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sysEvChargerUpdateEvsePropertyAsync
     *
     * Update EVSE property GuestUsageAllowed
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvsePropertyPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerUpdateEvsePropertyAsync($organization_id, $ev_charger_id, $evse_id, $put_data)
    {
        return $this->sysEvChargerUpdateEvsePropertyAsyncWithHttpInfo($organization_id, $ev_charger_id, $evse_id, $put_data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sysEvChargerUpdateEvsePropertyAsyncWithHttpInfo
     *
     * Update EVSE property GuestUsageAllowed
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvsePropertyPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sysEvChargerUpdateEvsePropertyAsyncWithHttpInfo($organization_id, $ev_charger_id, $evse_id, $put_data)
    {
        $returnType = 'object';
        $request = $this->sysEvChargerUpdateEvsePropertyRequest($organization_id, $ev_charger_id, $evse_id, $put_data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sysEvChargerUpdateEvseProperty'
     *
     * @param  string $organization_id  (required)
     * @param  string $ev_charger_id  (required)
     * @param  string $evse_id  (required)
     * @param  \Swagger\Client\Model\EcedoERPCRMInterfaceApiEvsePropertyPutData $put_data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function sysEvChargerUpdateEvsePropertyRequest($organization_id, $ev_charger_id, $evse_id, $put_data)
    {
        // verify the required parameter 'organization_id' is set
        if ($organization_id === null || (is_array($organization_id) && count($organization_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organization_id when calling sysEvChargerUpdateEvseProperty'
            );
        }
        // verify the required parameter 'ev_charger_id' is set
        if ($ev_charger_id === null || (is_array($ev_charger_id) && count($ev_charger_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ev_charger_id when calling sysEvChargerUpdateEvseProperty'
            );
        }
        // verify the required parameter 'evse_id' is set
        if ($evse_id === null || (is_array($evse_id) && count($evse_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $evse_id when calling sysEvChargerUpdateEvseProperty'
            );
        }
        // verify the required parameter 'put_data' is set
        if ($put_data === null || (is_array($put_data) && count($put_data) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $put_data when calling sysEvChargerUpdateEvseProperty'
            );
        }

        $resourcePath = '/sysapi/v1.0/organizations/{organizationId}/evchargers/{evChargerId}/evses/{evseId}/property';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($organization_id !== null) {
            $resourcePath = str_replace(
                '{' . 'organizationId' . '}',
                ObjectSerializer::toPathValue($organization_id),
                $resourcePath
            );
        }
        // path params
        if ($ev_charger_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evChargerId' . '}',
                ObjectSerializer::toPathValue($ev_charger_id),
                $resourcePath
            );
        }
        // path params
        if ($evse_id !== null) {
            $resourcePath = str_replace(
                '{' . 'evseId' . '}',
                ObjectSerializer::toPathValue($evse_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($put_data)) {
            $_tempBody = $put_data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            
            if($headers['Content-Type'] === 'application/json') {
                // \stdClass has no __toString(), so we should encode it manually
                if ($httpBody instanceof \stdClass) {
                    $httpBody = \GuzzleHttp\json_encode($httpBody);
                }
                // array has no __toString(), so we should encode it manually
                if(is_array($httpBody)) {
                    $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($httpBody));
                }
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if ($this->config->getUsername() !== null || $this->config->getPassword() !== null) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
